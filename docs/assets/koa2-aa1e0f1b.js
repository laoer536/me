import{o as s,c as a,a as p}from"./index-c507dab3.js";const t={class:"markdown-body"},o=p(`<img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/388d7aa477a848aba1c44c26e5f8b58a~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp?" alt="koa2+mongodb"><p>我是一名前端小菜鸡，平日里写写页面，写写 BUG，并乐此不疲，非常满足。当有一天，我突然想想，我如果自己要做一个完整的项目，那我就需要数据来帮忙呀，可是数据得要后端大佬们写接口给我才行，虽然我的程序员朋友还是有一米米，但大佬一般都忙呀，实在不好意思拉着，于是我就想，我是否可以自己来写接口呢？</p><p>于是我浏览万千网页，选择了一个不用太卷（主要是卷不动了 😥），对前端友好的 nodejs 来做后台开发。不说太多废话，开整！</p><p><strong>1、安装 mongodb</strong></p><p>地址：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.mongodb.com%2Ftry%2Fdownload%2Fenterprise" target="_blank" rel="noopener">MongoDB Community Download | MongoDB</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5638e11148d3416dbeb216f8f0e1eafb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><p>具体后续步骤<a href="https://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">Windows 平台安装 MongoDB | 菜鸟教程 (runoob.com)</a></p><p>和链接中的步骤唯一不同的是我是安装了<code>Mongodb Compass</code>的，官方的数据库图形化管理工具还是很不错的。</p><p><strong>2、下载依赖</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c87484c359934d78b3a0d9ef05d13ecd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="package.json依赖.png"></p><p><strong>3、对依赖进行配置（我统一放在了 setting 目录下）</strong></p><p>jwt</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-jwt&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">jwt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">secret</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">JWT_SECRET</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/public</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/login</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/web</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//token鉴权忽略public和login、web开头的接口</span>
<span class="token comment">//koa-jwt默认配置下 前端axios的请求拦截的headers里面这样设置 config.headers[&quot;authorization&quot;] = \`Bearer \${token}\`; 其中token是登录接口生成的</span>
</code></pre><p>koa-body</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-body&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> setting <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">multipart</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持文件上传</span>
  <span class="token literal-property property">formidable</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">maxFieldsSize</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 文件上传大小限制30M</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">koaBody</span><span class="token punctuation">(</span>setting<span class="token punctuation">)</span>
</code></pre><p>koa-static</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> koaStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-static&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">koaStatic</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p>koa-cors</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa2-cors&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> setting <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">KOA_CORS_ORIGIN</span><span class="token punctuation">,</span> <span class="token comment">//只允许这个域名的请求</span>
  <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//指定本次预检请求的有效期，单位为秒。</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否允许发送Cookie</span>
  <span class="token literal-property property">allowMethods</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置所允许的HTTP请求方法</span>
  <span class="token literal-property property">allowHeaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Accept&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置服务器支持的所有头信息字段</span>
  <span class="token literal-property property">exposeHeaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;WWW-Authenticate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Server-Authorization&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置获取其他自定义字段</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">cors</span><span class="token punctuation">(</span>setting<span class="token punctuation">)</span>
</code></pre><p>mongoose</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> connectUrl <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MONGODB_DB</span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接失败：&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库成功连接到：&#39;</span> <span class="token operator">+</span> connectUrl<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose
</code></pre><p><strong>4、封装其他中间件（也是放在了 setting）</strong></p><p>errHandle—处理异常</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">errHandle</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token comment">//全局异常处理 如果接口调用时有错误发生 但是真正逻辑处遗漏了对该异常的处理 就会到这里来执行</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;err信息&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&#39;没有权限访问&#39;</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token comment">//处理jwt的token鉴权</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment">//处理主要是接口调用产生的错误</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> errHandle
</code></pre><p>htmlHistory—兼容前端托管的静态页面的 history 模式 hash 模式不需要</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">htmlHistory</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// history 中间件</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&#39;/web/&#39;</span> <span class="token comment">// 需要判断的路径</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等待请求执行完毕</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断是否符合条件</span>
    ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span> <span class="token comment">// 修改响应类型</span>
    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 修改响应体</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> htmlHistory
</code></pre><p>routerResponse—统一请求返回体</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">successCode</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">successMsg</span><span class="token operator">:</span> <span class="token string">&#39;接口调用成功&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">failCode</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//默认的异常码</span>
  <span class="token literal-property property">failMsg</span><span class="token operator">:</span> <span class="token string">&#39;接口调用失败&#39;</span><span class="token punctuation">,</span> <span class="token comment">//默认的异常消息</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">routerResponse</span><span class="token punctuation">(</span><span class="token parameter">option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function-variable function">success</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//接口成功时我们更期望得到接口调用成功后的数据，虽然成功调用后提示消息可能不是很重要，但是有时也需要，所以加上</span>
      ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> option<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;json&#39;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rsCode</span><span class="token operator">:</span> option<span class="token punctuation">.</span>successCode<span class="token punctuation">,</span>
        <span class="token literal-property property">rsCause</span><span class="token operator">:</span> msg <span class="token operator">||</span> option<span class="token punctuation">.</span>successMsg<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> data <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    ctx<span class="token punctuation">.</span><span class="token function-variable function">fail</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//发生异常时前端期望得到异常信息描述和对应的状态码</span>
      ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> option<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;json&#39;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rsCode</span><span class="token operator">:</span> code <span class="token operator">||</span> option<span class="token punctuation">.</span>failCode<span class="token punctuation">,</span>
        <span class="token literal-property property">rsCause</span><span class="token operator">:</span> msg <span class="token operator">||</span> option<span class="token punctuation">.</span>failMsg<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">routerResponse</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span>
</code></pre><p>这样处理了之后，在页面里面就可以这样用</p><pre class="language-js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token string">&#39;获取所有用户成功&#39;</span><span class="token punctuation">)</span>
</code></pre><p>或者这样</p><pre class="language-js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
</code></pre><p>前端拿到的返回体就是</p><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
    <span class="token literal-property property">rsCode</span><span class="token operator">:</span>xxx<span class="token punctuation">,</span>
    <span class="token literal-property property">rsCause</span><span class="token operator">:</span>xxxx<span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span>xxx
<span class="token punctuation">}</span>
</code></pre><p><strong>注意：以下代码都会用到这个封装的中间件 保证接口返回体统一</strong></p><p>5、最激动的写接口部分 😘</p><p>登录获取 token—login.js (这里做示例，所以没有接参数，还是要接一下信息的，然后加入到 token 生成里面)</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> jwtToken <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;jsonwebtoken&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token comment">//基本接口的前缀 前端调用时地址为&#39;/login&#39;  即会和下面的地址拼接</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//payload中加入用户唯一信息 例如用户唯一id phoneNumber password等</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> jwtToken<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">JWT_SECRET</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token string">&#39;15d&#39;</span><span class="token punctuation">,</span> <span class="token comment">//设置该token的过期时间</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token string">&#39;获取token成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><p>文件的上传和下载—file.js</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> sendfile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-sendfile&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;/file&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 上传文件</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/upload&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> filepath<span class="token punctuation">,</span> originalFilename <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 获取上传文件</span>
  <span class="token keyword">const</span> reader <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>
  <span class="token keyword">let</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>originalFilename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">//储存在node服务中的upload文件夹下</span>
  <span class="token comment">// 创建可写流</span>
  <span class="token keyword">const</span> upStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
  <span class="token comment">// 可读流通过管道写入可写流</span>
  reader<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>upStream<span class="token punctuation">)</span>
  <span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fileUrl</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">KOA_CORS_ORIGIN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">//前面那个部分后期可以替换为其他可以访问的前缀 这里本地测试用</span>
  <span class="token punctuation">}</span>
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>resData<span class="token punctuation">,</span> <span class="token string">&#39;文件上传成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 下载文件</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/download&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ctx.request.query&#39;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> fileName <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token function">decodeURI</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//url编码 转换容易引起歧义的字符 例如中文字符</span>
  <span class="token keyword">await</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token comment">//前端页面需要对文件名进行decodeURIComponent解码 解码后能够拿到真正的名字</span>
  <span class="token comment">//另外 前端需要从返回体中获取文件名给a标签 从里面的headers的content-disposition中截取获得---》》》 res.headers[&quot;content-disposition&quot;]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><p>基本上都会用到的 user 信息处理</p><p>1、我们先建个表，直接用代码建立</p><p>src/models/user.js</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> Schema<span class="token punctuation">,</span> model <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> CompletedSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">collection</span><span class="token operator">:</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">versionKey</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">timestamps</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UserForm <span class="token operator">=</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;UserForm&#39;</span><span class="token punctuation">,</span> CompletedSchema<span class="token punctuation">)</span>
</code></pre><p>如代码所示，表示我们创建了一个名为 users 的数据表，每一个 user 喃，他有三个基本信息，分别是姓名，性别和电话，其中呢，name 和 phone 都是字符串，sex 只能取 0 和 1，熟悉 Typescript 的大佬应该感觉很亲切，这不就是枚举嘛，限制只能取这两个值。require 表示这个字段需要有值。其他的就不多说啦。mongoose 详细的使用可以参考这个大佬写的文章：<a href="https://juejin.cn/post/6844904054196273159" target="_blank" rel="noopener">你真的了解 mongoose 吗？ - 掘金 (juejin.cn)</a></p><p>2、开始写关于 user 的接口(作参考，不一定是最好的写法，但运行结果肯定是正确的哈 😂)</p><p>src/api/user.js</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../models/user&#39;</span> <span class="token comment">//将我们刚刚的表产生的model拿过来,通过他我们实现对数据库的操作。</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token keyword">await</span> UserForm<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//查询表中所有数据</span>
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token string">&#39;获取所有用户成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/getUserInfo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">获取id为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的用户</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/add&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//</span>
  <span class="token keyword">await</span> UserForm<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token comment">//向表中插入数据</span>
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token string">&#39;用户信息提交成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">修改id为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的用户</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params
  ctx<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">删除id为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的用户</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><p>最后附上我们程序的运行的基石——app.js</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/mongoose&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/koa2-cors&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/jwt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/koa-body&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> koaStatic <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/koa-static&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> htmlHistory <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/html-history&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> routerResponse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/routerResponse&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> errHandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/setting/error-handle&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//api部分</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/api/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/api/login&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/api/file&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//基础部分</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>cors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>koaBody<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>routerResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>errHandle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span>
<span class="token comment">//api部分</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>login<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//静态页面托管</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>htmlHistory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>koaStatic<span class="token punctuation">)</span> <span class="token comment">//因为前端打包的页面文件放在了web文件夹下 前端需要将项目publicPath修改为&#39;/web/&#39; 再打包放入 我这里前端用的是vue-router的history模式</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;app started at port 9000...&#39;</span><span class="token punctuation">)</span>
</code></pre><p>顺便看看 package.json</p><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodejs-koa2&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.7.8&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodejs for network&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;app.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon scripts/development.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon scripts/test.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prod&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon scripts/production.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;babel-plugin-transform-es2015-modules-commonjs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.26.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;babel-register&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.26.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dotenv&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^16.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;jsonwebtoken&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.5.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.13.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-body&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-jwt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.0.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-router&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^10.1.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-sendfile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa-static&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;koa2-cors&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;mongoose&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^6.3.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nodemon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.15&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.6.2&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>至此，完美撒花，感谢你宝贵的几分钟，哈哈哈哈 🤗。</p>`,53),e=[o],i={__name:"koa2",setup(c,{expose:n}){return n({frontmatter:{}}),(l,k)=>(s(),a("div",t,e))}};export{i as default};
